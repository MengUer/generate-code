<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.${projectName}.dao.${className}Mapper">
	<!-- 开启二级缓存 -->
	<cache />
	<resultMap id="BaseResultMap" type="com.${projectName}.model.${className}">
	#foreach($e in $list)
		<result property="${e.columnJavaName}" column="${e.columnName}" jdbcType="${e.myBatisType}" />
	#end	
	</resultMap>
	
	<sql id="tableName">
		${tableName}
	</sql>
	
	<sql id="baseColumns">
		<trim suffixOverrides=",">
		#foreach($e in $list)
			${e.columnName},
		#end	
		</trim>
	</sql>
	
	<sql id="QueryColumnList">
		<trim suffixOverrides=",">
		#foreach($e in $list)
			t.${e.columnName},
		#end	
		</trim>
	</sql>
	
	<insert id="insert" parameterType="com.${projectName}.model.${className}">
		INSERT INTO
		<include refid="tableName" />
		(
		<include refid="baseColumns" />
		)VALUES(
		<trim suffixOverrides=",">
		#foreach($e in $list)
			#{${e.columnJavaName}, jdbcType=${e.myBatisType}},
		#end	
		</trim>
		)
	</insert>
	
	<!-- 有则更新，无则新增 -->
    <insert id="upsert" parameterType="${projectName}.domain.${className}">
        MERGE into <include refid="tableName" /> t
        USING (
            SELECT
            <trim suffixOverrides=",">
            #foreach($e in $list)
            <choose><when test="${e.columnJavaName} != null">#{${e.columnJavaName}}</when><otherwise>''</otherwise></choose> AS ${e.columnName},
            #end
            </trim>
            FROM dual
        ) tt
        ON (
            1=1
            and t.seq_id=tt.seq_id
        )
        WHEN MATCHED THEN
            <!-- 执行update -->
            UPDATE
            <set>
            #foreach( $e in $list)
                #if(${e.columnJavaName}!='seqId' && ${e.columnJavaName}!='createTime' && ${e.columnJavaName}!='updateTime')
                t.${e.columnName} = tt.${e.columnName},
                #end
            #end
                t.update_time = sysdate
            </set>
        WHEN NOT MATCHED THEN
            <!-- 执行insert -->
            INSERT 
            (
            <trim suffixOverrides=",">
            #foreach($e in $list)
                #if(${e.columnJavaName}!='seqId' && ${e.columnJavaName}!='createTime' && ${e.columnJavaName}!='updateTime')
                t.${e.columnName},
                #end
            #end    
            </trim>
            )VALUES(
            <trim suffixOverrides=",">
            #foreach($e in $list)
                #if(${e.columnJavaName}!='seqId' && ${e.columnJavaName}!='createTime' && ${e.columnJavaName}!='updateTime')
                tt.${e.columnName},
                #end
            #end    
            </trim>
            )
    </insert>
	
	<insert id="insertMany" parameterType="java.util.List">
		INSERT ALL
		<foreach item="item" index="index" collection="list">
			INTO
			<include refid="tableName" />
			(
			<include refid="baseColumns" />
			)VALUES(
			<trim suffixOverrides=",">
			#foreach($e in $list)
				#{item.${e.columnJavaName}, jdbcType=${e.myBatisType}},
			#end	
			</trim>
			)
		</foreach>
		SELECT 1 FROM DUAL
	</insert>
	
	<delete id="delete" parameterType="com.${projectName}.model.${className}">
        DELETE FROM
        <include refid="tableName" />
                WHERE 1=1
#foreach( $e in $list)
    #if(${e.myBatisType}=='VARCHAR' && ${e.columnIsLikeQuery}=='YES')
        <if test="${e.columnJavaName} != null">
            AND t.${e.columnName} LIKE CONCAT(CONCAT('%',#{${e.columnJavaName}}),'%')
        </if>
    #elseif(${e.myBatisType}!='TIMESTAMP')
        <if test="${e.columnJavaName} != null">
            AND t.${e.columnName} = #{${e.columnJavaName}}
        </if>
    #end
#end
    </delete>

	<delete id="deleteByGid" parameterType="java.lang.Long">
		DELETE FROM
		<include refid="tableName" />
		WHERE gid = #{gid}
	</delete>

	<delete id="deleteByGids" parameterType="java.util.List">
		DELETE FROM
		<include refid="tableName" />
		WHERE gid IN
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<update id="update" parameterType="com.${projectName}.model.${className}">
		UPDATE
		<include refid="tableName" />
		<set>
		#foreach( $e in $list)
			<if test="${e.columnJavaName} != null">
				${e.columnName} = #{${e.columnJavaName}},
			</if>
		#end
			updatetime = SYSDATE
		</set>
		WHERE GID = #{gid}
	</update>

	<update id="updateMany" parameterType="java.util.List">
		BEGIN
		<foreach item="item" index="index" collection="list">
			UPDATE
			<include refid="tableName" />
			<set>
			#foreach( $e in $list)
				<if test="item.${e.columnJavaName} != null">
					${e.columnName} = #{item.${e.columnJavaName}},
				</if>
			#end
				updatetime = SYSDATE
			</set>
			WHERE GID = #{item.gid};
		</foreach>
		END;
	</update>
	
	<select id="query" parameterType="com.${projectName}.model.${className}" resultMap="BaseResultMap">
		SELECT
		<include refid="QueryColumnList" />
		FROM
		<include refid="tableName" /> t
		WHERE 1=1
#foreach( $e in $list)
	#if(${e.myBatisType}=='VARCHAR' && ${e.columnIsLikeQuery}=='YES')
		<if test="${e.columnJavaName} != null">
			AND t.${e.columnName} LIKE CONCAT(CONCAT('%',#{${e.columnJavaName}}),'%')
		</if>
	#elseif(${e.myBatisType}!='TIMESTAMP')
		<if test="${e.columnJavaName} != null">
			AND t.${e.columnName} = #{${e.columnJavaName}}
		</if>
	#end
#end
		<if test="startTime != null and startTime != ''">
			AND t.updatetime >= TO_DATE(#{startTime},'SYYYY-MM-DD HH24:MI:SS')
		</if>
		<if test="endTime != null and endTime != ''">
			AND t.updatetime &lt;= TO_DATE(#{endTime},'SYYYY-MM-DD HH24:MI:SS')
		</if>
	</select>

	<select id="queryByGid" parameterType="java.lang.Long" resultMap="BaseResultMap">
		SELECT
		<include refid="QueryColumnList" />
		FROM
		<include refid="tableName" /> t
		WHERE t.gid = #{gid}
	</select>

	<select id="queryByGids" parameterType="java.util.List" resultMap="BaseResultMap">
		SELECT
		<include refid="QueryColumnList" />
		FROM
		<include refid="tableName" /> t
		WHERE t.gid IN
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>
	
</mapper>