package ${projectName}.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import ${projectName}.constant.ErrorCodeConstants;
import ${projectName}.entity.${className};
import ${projectName}.base.ResultDTO;
import ${projectName}.service.${className}Service;

/**
 * @author menguer@126.com
 * @date 2019年9月20日 下午2:55:03
 * @version 1.0.0
 * @description
 */
@RestController
@Api(value = "${className}Controller", tags = "${tableComment}")
@RequestMapping(value = "${className}Controller")
public class ${className}Controller {
    private static final Logger log = LoggerFactory.getLogger(${className}Controller.class);

    @Autowired
    private ${className}Service service;

    @ApiOperation(value = "新增单条数据", notes = "新增单条数据")
    @RequestMapping(value = "/insert", method = { RequestMethod.POST })
    public ResultDTO insert(@RequestBody ${className} entity) {
        try {
            return ResultDTO.success(service.insert(entity));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }

    @ApiOperation(value = "新增多条数据", notes = "新增多条数据")
    @RequestMapping(value = "/insertMany", method = { RequestMethod.POST })
    public ResultDTO insertMany(@RequestBody List<${className}> list) {
        try {
            return ResultDTO.success(service.insertMany(list));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }

    @ApiOperation(value = "按条件删除", notes = "按条件删除")
    @RequestMapping(value = "/delete", method = { RequestMethod.POST })
    public ResultDTO delete(@RequestBody ${className} entity) {
        try {
            return ResultDTO.success(service.delete(entity));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }

    @ApiOperation(value = "根据id删除", notes = "根据id删除")
    @RequestMapping(value = "/deleteById", method = { RequestMethod.POST })
    public ResultDTO deleteById(Long seqId) throws Exception {
        try {
            return ResultDTO.success(service.deleteById(seqId));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }

    @ApiOperation(value = "根据id批量删除", notes = "根据id批量删除")
    @RequestMapping(value = "/deleteByIds", method = { RequestMethod.POST })
    public ResultDTO deleteByIds(List<Long> seqIds) {
        try {
            return ResultDTO.success(service.deleteByIds(seqIds));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }

    @ApiOperation(value = "更新单条数据", notes = "更新单条数据")
    @RequestMapping(value = "/update", method = { RequestMethod.POST })
    public ResultDTO update(@RequestBody ${className} entity) {
        try {
            return ResultDTO.success(service.update(entity));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }

    @ApiOperation(value = "更新多条数据", notes = "更新多条数据")
    @RequestMapping(value = "/updateMany", method = { RequestMethod.POST })
    public ResultDTO updateMany(@RequestBody List<${className}> list) {
        try {
            return ResultDTO.success(service.updateMany(list));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }
    
    @ApiOperation(value = "根据条件查询", notes = "根据条件查询")
    @RequestMapping(value = "/list", method = { RequestMethod.POST })
    public ResultDTO list(@RequestBody ${className} entity) {
        try {
            return ResultDTO.success(service.list(entity));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }
    
    @ApiOperation(value = "查询详情", notes = "查询详情")
    @RequestMapping(value = "/getInfo", method = { RequestMethod.POST })
    public ResultDTO getInfo(Long seqId) {
        try {
            return ResultDTO.success(service.getInfo(seqId));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }
    
    @ApiOperation(value = "查询分组统计信息", notes = "查询分组统计信息")
    @RequestMapping(value = "/getInfoGroupBy", method = { RequestMethod.POST })
    public ResultDTO getInfoGroupBy(@RequestBody ${className} entity, String groupBy) {
        try {
            return ResultDTO.success(service.getInfoGroupBy(entity, groupBy));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
            return ResultDTO.fail(ErrorCodeConstants.ERROR_CODE, e.getMessage());
        }
    }
}