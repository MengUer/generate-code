package ${projectName}.service.impl;

import java.util.*;

import com.alibaba.fastjson.JSONArray;
import org.springframework.transaction.annotation.Transactional;
import ${projectName}.dao.${className}Mapper;
import ${projectName}.entity.${className};
import ${projectName}.service.${className}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * @author menguer@126.com
 * @date 2019年9月20日 下午1:57:15
 * @version 1.0.0
 * @description
 */
@Service
public class ${className}ServiceImpl implements ${className}Service {
    @Autowired
    private ${className}Mapper mapper;

    @Override
    public int upsert(${className} entity) {
        if (entity == null) {
            return -1;
        }
        List<${className}> list = new ArrayList<>();
        list.add(entity);
        return upsertBatch(list);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int upsertBatch(List<${className}> list) {
        if (list == null || list.isEmpty()) {
            return -1;
        }
        int size = list.size();
        for (int i = 0; i < size; i += BATCH_SIZE) {
            int end = Math.min(i + BATCH_SIZE, size);
            mapper.upsertBatch(list.subList(i, end));
        }
        return size;
    }

    @Override
    public int insert(${className} entity) {
        if (entity == null) {
            return -1;
        }
        List<${className}> list = new ArrayList<>();
        list.add(entity);
        return insertBatch(list);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int insertBatch(List<${className}> list) {
        if (list == null || list.isEmpty()) {
            return -1;
        }
        int size = list.size();
        for (int i = 0; i < size; i += BATCH_SIZE) {
            int end = Math.min(i + BATCH_SIZE, size);
            mapper.insertBatch(list.subList(i, end));
        }
        return size;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int delete(${className} entity) {
        if (entity == null) {
            return -1;
        }
        return mapper.delete(entity);
    }

    @Override
    public int deleteById(String id) {
        if (id == null || id.isEmpty()) {
            return -1;
        }
        Set<String> ids = new HashSet<>();
        ids.add(id);
        return deleteByIds(ids);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int deleteByIds(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return -1;
        }
        List<String> idList = new ArrayList<>(ids);
        int size = idList.size();
        for (int i = 0; i < size; i += BATCH_SIZE) {
            int end = Math.min(i + BATCH_SIZE, size);
            mapper.deleteByIds(idList.subList(i, end));
        }
        return size;
    }

    @Override
    public int update(${className} entity) {
        if (entity == null) {
            return -1;
        }
        List<${className}> list = new ArrayList<>();
        list.add(entity);
        return updateBatch(list);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int updateBatch(List<${className}> list) {
        if (list == null || list.isEmpty()) {
            return -1;
        }
        int size = list.size();
        for (int i = 0; i < size; i += BATCH_SIZE) {
            int end = Math.min(i + BATCH_SIZE, size);
            mapper.updateBatch(list.subList(i, end));
        }
        return size;
    }

    @Override
    public List<${className}> list(${className} entity) {
        if (entity == null) {
            return new ArrayList<>();
        }
        return mapper.list(entity);
    }

    @Override
    public ${className} getById(String id) {
        if (id == null || id.isEmpty()) {
            return new ${className}();
        }
        Set<String> ids = new HashSet<>();
        ids.add(id);
        List<${className}> list = listByIds(ids);
        if (list == null || list.isEmpty()) {
            return new ${className}();
        }
        return list.get(0);
    }

    @Override
    public List<${className}> listByIds(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return new ArrayList<>();
        }
        List<String> idList = new ArrayList<>(ids);
        int size = idList.size();

        List<${className}> list = new ArrayList<>();
        for (int i = 0; i < size; i += BATCH_SIZE) {
            int end = Math.min(i + BATCH_SIZE, size);
            list.addAll(mapper.listByIds(idList.subList(i, end)));
        }
        return list;
    }

    @Override
    public JSONArray getInfoGroupBy(${className} entity, Collection<String> groupBy) {
        return mapper.getInfoGroupBy(entity, groupBy);
    }
}